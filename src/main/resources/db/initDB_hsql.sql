DROP TABLE user_roles IF EXISTS;
DROP TABLE votes IF EXISTS;
DROP TABLE dishes IF EXISTS;
DROP TABLE restaurants IF EXISTS;
DROP TABLE users IF EXISTS;
DROP SEQUENCE global_seq IF EXISTS;

CREATE SEQUENCE global_seq AS INTEGER START WITH 1 INCREMENT BY 1;

CREATE TABLE users
(
    id               INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    name             VARCHAR(255)            NOT NULL,
    email            VARCHAR(255)            NOT NULL,
    password         VARCHAR(255)            NOT NULL,
    registered       DATE DEFAULT now()      NOT NULL,
    enabled          BOOLEAN DEFAULT TRUE    NOT NULL
);
CREATE UNIQUE INDEX users_unique_email_idx
    ON USERS (email);

CREATE TABLE restaurants
(
    id               INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    name             VARCHAR(255)            NOT NULL,
    registered       DATE DEFAULT now()      NOT NULL,
    enabled          BOOLEAN DEFAULT TRUE    NOT NULL
);
CREATE UNIQUE INDEX restaurants_unique_name_idx
    ON restaurants (name);

CREATE TABLE dishes
(
    id               INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    name             VARCHAR(255)            NOT NULL,
    price            INTEGER DEFAULT 0       NOT NULL,
    date             DATE DEFAULT now()      NOT NULL,
    restaurant_id    INTEGER                 NOT NULL,
    CONSTRAINT dishes_unique_name_date_restaurant_idx UNIQUE (name, date, restaurant_id),
    FOREIGN KEY (restaurant_id) REFERENCES RESTAURANTS (id)
);

CREATE TABLE votes
(
    id               INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    user_id          INTEGER                 NOT NULL,
    restaurant_id    INTEGER                 NOT NULL,
    date             DATE DEFAULT now()      NOT NULL,
    CONSTRAINT votes_unique_user_date_idx UNIQUE (user_id, date),
    FOREIGN KEY (restaurant_id) REFERENCES RESTAURANTS (id),
    FOREIGN KEY (user_id) REFERENCES USERS (id)
);

CREATE TABLE user_roles
(
    user_id INTEGER NOT NULL,
    role    VARCHAR(255),
    CONSTRAINT user_roles_unique_idx UNIQUE (user_id, role),
    FOREIGN KEY (user_id) REFERENCES USERS (id)
);